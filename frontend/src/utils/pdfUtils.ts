import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';

// Extend jsPDF with autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

// Simple wrapper to create PDF with autoTable
const createPdf = () => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  // Initialize autoTable
  (doc as any).autoTable = autoTable;

  // Initialize default font
  doc.setFont('helvetica');
  doc.setFontSize(10);

  return doc;
};

interface AnalyticsData {
  filter: {
    year: number;
    mStart: number;
    mEnd: number;
  };
  totals: {
    _id: null;
    policies: number;
    premium: number;
    vli: number;
    commission: number;
    reward: number;
    profit: number;
  };
}

export const generateAnalyticsPDF = (data: AnalyticsData) => {
  const doc = createPdf();

  // Document properties
  doc.setProperties({
    title: 'Analytics Report',
    subject: 'Analytics Report',
    author: 'Insurance App',
  });

  // ===== HEADER =====
  doc.setFontSize(20);
  doc.setTextColor(40, 62, 80);
  doc.setFont('helvetica', 'bold');
  doc.text('Insurance Analytics Report', 105, 25, { align: 'center' });

  doc.setFontSize(10);
  doc.setTextColor(100);
  doc.setFont('helvetica', 'normal');
  doc.text(`Generated on: ${new Date().toLocaleString()}`, 14, 35);

  doc.setFontSize(12);
  doc.setTextColor(40, 62, 80);
  doc.setFont('helvetica', 'bold');
  doc.text('Report Period:', 14, 45);
  doc.setFont('helvetica', 'normal');
  doc.text(
    `From: ${data.filter.mStart}/${data.filter.year} - To: ${data.filter.mEnd}/${data.filter.year}`,
    50,
    45
  );

  // ===== SUMMARY =====
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Summary', 14, 60);
  doc.setLineWidth(0.5);
  doc.line(14, 63, 50, 63);

  const summaryData = [
    ['Total Policies', data.totals.policies.toLocaleString()],
    [
      'Total Premium',
      `$${data.totals.premium.toLocaleString(undefined, {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      })}`,
    ],
    [
      'Total VLI',
      `$${data.totals.vli.toLocaleString(undefined, {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      })}`,
    ],
    [
      'Total Commission',
      `$${data.totals.commission.toLocaleString(undefined, {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      })}`,
    ],
    [
      'Total Reward',
      `$${data.totals.reward.toLocaleString(undefined, {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      })}`,
    ],
    [
      'Total Profit',
      `$${data.totals.profit.toLocaleString(undefined, {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      })}`,
    ],
  ];

  autoTable(doc, {
    startY: 70,
    head: [['Metric', 'Amount']],
    body: summaryData,
    theme: 'grid',
    styles: { font: 'helvetica', fontSize: 10, cellPadding: 5 },
    headStyles: { fillColor: [40, 62, 80], textColor: 255, fontStyle: 'bold' },
    didDrawPage: (data: any) => {
      const doc = data.doc;
      const pageSize = doc.internal.pageSize;
      const pageHeight = pageSize.height || pageSize.getHeight();
      const pageWidth = pageSize.width || pageSize.getWidth();

      doc.setFontSize(10);
      doc.setTextColor(150);
      doc.text(
        'Generated by Insurance App - Confidential',
        pageWidth / 2,
        pageHeight - 10,
        { align: 'center' }
      );
    },
  });
  
  

  // ===== BAR CHART =====
  const chartY = (doc as any).lastAutoTable?.finalY
    ? (doc as any).lastAutoTable.finalY + 20
    : 120;

  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('Financial Overview', 14, chartY - 5);

  const chartData = [
    { label: 'Premium', value: data.totals.premium, color: [76, 175, 80] },
    { label: 'Commission', value: data.totals.commission, color: [33, 150, 243] },
    { label: 'Profit', value: data.totals.profit, color: [255, 152, 0] },
  ];

  const maxValue = Math.max(...chartData.map((item) => item.value));
  const chartHeight = 40;
  const barWidth = 30;
  const startX = 30;
  const startY = chartY + 10;
  const scale = chartHeight / (maxValue * 1.2);

  chartData.forEach((item, index) => {
    const x = startX + index * (barWidth + 20);
    const barHeight = item.value * scale;

    doc.setFillColor(item.color[0], item.color[1], item.color[2]);
    doc.rect(x, startY + (chartHeight - barHeight), barWidth, barHeight, 'F');

    doc.setFontSize(8);
    doc.setTextColor(0);
    doc.text(
      `$${item.value.toLocaleString(undefined, { maximumFractionDigits: 0 })}`,
      x + barWidth / 2,
      startY + (chartHeight - barHeight) - 2,
      { align: 'center' }
    );

    doc.text(
      item.label,
      x + barWidth / 2,
      startY + chartHeight + 5,
      { align: 'center' }
    );
  });

  // ===== PAGE NUMBERS =====
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.setTextColor(150);
    doc.text(
      `Page ${i} of ${pageCount}`,
      doc.internal.pageSize.width - 20,
      doc.internal.pageSize.height - 10
    );
  }

  return doc;
};

export const downloadAnalyticsPDF = (
  data: AnalyticsData,
  filename = 'analytics-report.pdf'
) => {
  const doc = generateAnalyticsPDF(data);
  doc.save(filename);
};

export const openAnalyticsPDFInNewTab = (data: AnalyticsData) => {
  const doc = generateAnalyticsPDF(data);
  const pdfBlob = doc.output('blob');
  const pdfUrl = URL.createObjectURL(pdfBlob);
  window.open(pdfUrl, '_blank');
};
